
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      ZoomEffectExample
 *  Source:     F:\GitHub\hataka\hataka.github.io\TourDeFlex3\explorer\mx\effects\ZoomEffectExample\ZoomEffectExample.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2018.12.28 10:13:06 JST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Panel;
import mx.controls.Image;
import mx.controls.Text;
import mx.core.Application;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.effects.Zoom;
import mx.filters.*;
import mx.styles.*;


[SWF( heightPercent='100%', widthPercent='100%')]
[Frame(extraClass="_ZoomEffectExample_FlexInit")]

[Frame(factoryClass="_ZoomEffectExample_mx_managers_SystemManager")]


public class ZoomEffectExample
    extends mx.core.Application
{

    [Bindable]
	/**
 * @private
 **/
    public var img : mx.controls.Image;

    [Bindable]
	/**
 * @private
 **/
    public var zoomAll : mx.effects.Zoom;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.core.Application
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Panel
        ,
        stylesFactory: function():void {
          this.paddingBottom = 10;
          this.paddingTop = 10;
          this.paddingLeft = 10;
          this.paddingRight = 10;
        }
        ,
        propertiesFactory: function():Object { return {
          title: "Zoom Effect Example",
          percentHeight: 100.0,
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Text
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                text: "Move the mouse over the image to enlarge it. Move the mouse off of the image to shrink it."
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Image
              ,
              id: "img"
              ,
              events: {
                rollOver: "__img_rollOver",
                rollOut: "__img_rollOut"
              }
              ,
              propertiesFactory: function():Object { return {
                source: _embed_mxml_assets_ApacheFlexLogo_png_231385346,
                scaleX: 0.25,
                scaleY: 0.25
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
    public function ZoomEffectExample()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties
        _ZoomEffectExample_Zoom1_i();


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
        //  initialize component styles
        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.paddingBottom = 0;
            this.paddingTop = 0;
            this.paddingLeft = 0;
            this.paddingRight = 0;
        };


        // ambient styles
        mx_internal::_ZoomEffectExample_StylesInit();

                         
    }
 
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


		
            import flash.events.MouseEvent;
		
            public function doZoom(event:MouseEvent):void {
                if (zoomAll.isPlaying) {
                    zoomAll.reverse();
                }
                else {
                    // If this is a ROLL_OUT event, play the effect backwards. 
                    // If this is a ROLL_OVER event, play the effect forwards.
                    zoomAll.play([event.target], event.type == MouseEvent.ROLL_OUT ? true : false);
                }
            }
        



    //  supporting function definitions for properties, events, styles, effects
private function _ZoomEffectExample_Zoom1_i() : mx.effects.Zoom
{
	var temp : mx.effects.Zoom = new mx.effects.Zoom();
	temp.zoomWidthTo = 0.5;
	temp.zoomHeightTo = 0.5;
	temp.zoomWidthFrom = 0.25;
	temp.zoomHeightFrom = 0.25;
	zoomAll = temp;
	mx.binding.BindingManager.executeBindings(this, "zoomAll", zoomAll);
	return temp;
}

/**
 * @private
 **/
public function __img_rollOver(event:flash.events.MouseEvent):void
{
	doZoom(event)
}

/**
 * @private
 **/
public function __img_rollOut(event:flash.events.MouseEvent):void
{
	doZoom(event)
}




    mx_internal var _ZoomEffectExample_StylesInit_done:Boolean = false;

    mx_internal function _ZoomEffectExample_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_ZoomEffectExample_StylesInit_done)
            return;
        else
            mx_internal::_ZoomEffectExample_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

        styleManager.initProtoChainRoots();
    }


[Embed(source='assets/ApacheFlexLogo.png')]
 private var _embed_mxml_assets_ApacheFlexLogo_png_231385346:Class;



}

}
