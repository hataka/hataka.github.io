
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      viewsource
 *  Source:     F:\codingground\flash\TourDeFlex3\explorer\viewsource.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.01.04 21:38:06 JST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.TabNavigator;
import mx.containers.VBox;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;



public class viewsource
    extends mx.containers.VBox
{

    [Bindable]
	/**
 * @private
 **/
    public var tn : mx.containers.TabNavigator;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.VBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.TabNavigator
        ,
        id: "tn"
        ,
        stylesFactory: function():void {
          this.paddingTop = 0;
          this.borderStyle = "none";
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
    public function viewsource()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
        //  initialize component styles
        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.paddingLeft = 0;
            this.paddingRight = 0;
        };



                         
    }
 
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


		
			
			public function loadSource(appUrl:String, srcUrl:String):void
			{
				// delete all previously loaded source
				tn.removeAllChildren();
				
				var tabs:Array = new Array();
				if (appUrl != null && appUrl != "")
				{
					var files:Array = new Array();
					// the first file shown will be the mxml source
					if (appUrl.indexOf(".mxml") >= 0 || appUrl.indexOf(".as") >= 0) {
						files[0] = appUrl;
					}
					else if (appUrl.indexOf(".swf") == -1) {
						files[0] = appUrl + ".mxml";
					}
					
					if (srcUrl != null && srcUrl != "")
					{
						// other source files are shown in the subsequence tabs
						var otherSrc:Array = srcUrl.split("&");
						files = files.concat(otherSrc);
					}

	        		for (var i:int = 0; i < files.length ; i++)
    	    		{
						tabs[i] = new SourceTab();
						tn.addChild(tabs[i]);
						tabs[i].source = files[i];
						tabs[i].app = appUrl;
    	    		}
				}
			}
			
						
			public function thirdPartyWarning():void
			{
				tn.removeAllChildren();
				tn.addChild(new ThirdPartyTab());
			}
		



    //  supporting function definitions for properties, events, styles, effects






}

}
