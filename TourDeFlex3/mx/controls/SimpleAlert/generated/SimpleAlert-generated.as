
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      SimpleAlert
 *  Source:     F:\GitHub\hataka\hataka.github.io\TourDeFlex3\mx\controls\SimpleAlert\SimpleAlert.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2018.12.28 09:45:24 JST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Panel;
import mx.controls.Button;
import mx.controls.Label;
import mx.controls.Text;
import mx.core.Application;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;


[SWF( heightPercent='100%', widthPercent='100%')]
[Frame(extraClass="_SimpleAlert_FlexInit")]

[Frame(factoryClass="_SimpleAlert_mx_managers_SystemManager")]


public class SimpleAlert
    extends mx.core.Application
{

    [Bindable]
	/**
 * @private
 **/
    public var status : mx.controls.Label;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.core.Application
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Panel
        ,
        stylesFactory: function():void {
          this.horizontalAlign = "center";
          this.paddingBottom = 10;
          this.paddingTop = 10;
          this.paddingLeft = 10;
          this.paddingRight = 10;
        }
        ,
        propertiesFactory: function():Object { return {
          title: "Alert Control Example",
          percentHeight: 100.0,
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Text
              ,
              stylesFactory: function():void {
                this.textAlign = "center";
              }
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                text: "Click the button below to display a simple Alert window."
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              events: {
                click: "___SimpleAlert_Button1_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "Click Me"
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Text
              ,
              stylesFactory: function():void {
                this.textAlign = "center";
              }
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                text: "Click the button below to display an Alert window and capture the button pressed by the user."
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              events: {
                click: "___SimpleAlert_Button2_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "Click Me"
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Label
              ,
              id: "status"
              ,
              stylesFactory: function():void {
                this.fontWeight = "bold";
              }
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Text
              ,
              stylesFactory: function():void {
                this.textAlign = "center";
              }
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                text: "Click the button below to display an Alert window that uses custom Button labels."
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              events: {
                click: "___SimpleAlert_Button3_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "Click Me"
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
    public function SimpleAlert()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
        //  initialize component styles
        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.paddingBottom = 0;
            this.paddingTop = 0;
            this.paddingLeft = 0;
            this.paddingRight = 0;
        };


        // ambient styles
        mx_internal::_SimpleAlert_StylesInit();

                         
    }
 
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }



            import mx.controls.Alert;
            import mx.events.CloseEvent;
        
            // Event handler function uses a static method to show
            // a pop-up window with the title, message, and requested buttons.        
            private function clickHandler(event:Event):void {
                Alert.show("Do you want to save your changes?", "Save Changes", 3, this, alertClickHandler);
            }
        
            // Event handler function for displaying the selected Alert button.
            private function alertClickHandler(event:CloseEvent):void {
                if (event.detail==Alert.YES)
                    status.text="You answered Yes";
                else
                    status.text="You answered No";
            }

            // Event handler function changes the default Button labels and sets the
            // Button widths. If you later use an Alert with the default Buttons, 
            // you must reset these values.
            private function secondClickHandler(event:Event):void {
                Alert.buttonWidth = 100;
                Alert.yesLabel = "Magenta";
                Alert.noLabel = "Blue";
                Alert.cancelLabel = "Green";

                Alert.show("Select a color:","Color Selection",1|2|8,this);
                
                // Set the labels back to normal:
                Alert.yesLabel = "Yes";
                Alert.noLabel = "No";                
            }
        



    //  supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___SimpleAlert_Button1_click(event:flash.events.MouseEvent):void
{
	Alert.show('Hello World!', 'Message')
}

/**
 * @private
 **/
public function ___SimpleAlert_Button2_click(event:flash.events.MouseEvent):void
{
	clickHandler(event)
}

/**
 * @private
 **/
public function ___SimpleAlert_Button3_click(event:flash.events.MouseEvent):void
{
	secondClickHandler(event)
}




    mx_internal var _SimpleAlert_StylesInit_done:Boolean = false;

    mx_internal function _SimpleAlert_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_SimpleAlert_StylesInit_done)
            return;
        else
            mx_internal::_SimpleAlert_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

        styleManager.initProtoChainRoots();
    }




}

}
