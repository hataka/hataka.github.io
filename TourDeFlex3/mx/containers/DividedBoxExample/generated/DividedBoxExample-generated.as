
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      DividedBoxExample
 *  Source:     F:\codingground\flash\TourDeFlex3\mx\containers\DividedBoxExample\DividedBoxExample.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2018.06.09 18:49:29 JST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.DividedBox;
import mx.containers.Panel;
import mx.controls.Text;
import mx.core.Application;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;


[SWF( heightPercent='100%', widthPercent='100%')]
[Frame(extraClass="_DividedBoxExample_FlexInit")]

[Frame(factoryClass="_DividedBoxExample_mx_managers_SystemManager")]


public class DividedBoxExample
    extends mx.core.Application
{




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.core.Application
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Panel
        ,
        stylesFactory: function():void {
          this.paddingBottom = 10;
          this.paddingTop = 10;
          this.paddingLeft = 10;
          this.paddingRight = 10;
        }
        ,
        propertiesFactory: function():Object { return {
          title: "DividedBox Container Example",
          percentHeight: 100.0,
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Text
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                text: "A horizontal DividedBox container. Drag the divider side to side to resize the children."
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.DividedBox
              ,
              propertiesFactory: function():Object { return {
                direction: "horizontal",
                percentWidth: 100.0,
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.Panel
                    ,
                    stylesFactory: function():void {
                      this.backgroundColor = 13421772;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      title: "Panel 1",
                      percentWidth: 25.0,
                      percentHeight: 100.0
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.Panel
                    ,
                    stylesFactory: function():void {
                      this.backgroundColor = 13421772;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      title: "Panel 2",
                      percentWidth: 25.0,
                      percentHeight: 100.0
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
    public function DividedBoxExample()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
        //  initialize component styles
        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.paddingBottom = 0;
            this.paddingTop = 0;
            this.paddingLeft = 0;
            this.paddingRight = 0;
            this.fontWeight = "normal";
            this.fontSize = 24;
        };


        // ambient styles
        mx_internal::_DividedBoxExample_StylesInit();

                         
    }
 
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }




    //  supporting function definitions for properties, events, styles, effects



    mx_internal var _DividedBoxExample_StylesInit_done:Boolean = false;

    mx_internal function _DividedBoxExample_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_DividedBoxExample_StylesInit_done)
            return;
        else
            mx_internal::_DividedBoxExample_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

        styleManager.initProtoChainRoots();
    }




}

}
